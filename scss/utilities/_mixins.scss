// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
    &__#{$element} {
        @content;
    }
}

@mixin m($modifier) {
    &--#{$modifier} {
        @content;
    }
}

// Generate modifier color classes

// @mixin bg-colors($map) {
//     @each $theme, $color in $map {
//         &--#{$theme} {
//             background-color: $color;
//             border-color: $color;
//         }
//     }
// }

// Generating :before or :after pseudo-element shapes

@mixin p-el($el,
    $el-w: null,
    $el-h: null) {
    @if $el =="before" or $el =="after" {
        &:#{$el} {
            @extend %pseudos;
            width: $el-w;
            height: $el-h;
            @content;
        }
    }

    @else {
        @error "`#{$el}` is not a valid pseudo-element.";
    }
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
    background-image: url('#{$path--rel}/#{$img}');
    background-repeat: no-repeat;
    width: $w;
    height: $h;
    display: $disp;
}

// Media queries

@mixin mq($break) {
    @if $break =="mini" {
        @media (max-width: $brkpoint-sm) {
            @content;
        }
    }

    @else if $break =="small" {
        @media (min-width: $brkpoint-sm) {
            @content;
        }
    }

    @else if $break =="max-medium" {
        @media (min-width: $brkpoint-sm) {
            @content;
        }
    }

    @else if $break =="medium" {
        @media (min-width: ($brkpoint-md + 1)) {
            @content;
        }
    }

    @else if $break =="large" {
        @media (min-width: $brkpoint-lg) {
            @content;
        }
    }

    @else {
        @error "Whoops! No value can be retrieved for `#{$break}`!"
    }
}